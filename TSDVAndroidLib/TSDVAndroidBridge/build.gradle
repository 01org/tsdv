import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable android studio ndk integration
    }

    // build native library using custom Android.mk instead
    task ndkBuild(type: Exec) {
        commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath
    }

    // build clean
    task ndkClean(type: Exec) {
        commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath, 'clean'
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    clean.dependsOn ndkClean

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.1.0'
}


def getNdkBuildPath() {
    def properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    if (ndkDir == null)
        throw new GradleException("ndk.dir not found, add ndk.dir in the local.properties file")

    def ndkBuildPath = ndkDir + '/';

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildPath += "ndk-build.cmd"
    } else {
        ndkBuildPath += "ndk-build"
    }

    return ndkBuildPath;
}